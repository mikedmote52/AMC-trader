version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: amc-trader-postgres
    environment:
      POSTGRES_DB: amc_trader
      POSTGRES_USER: amc_trader
      POSTGRES_PASSWORD: amc_trader_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - amc-trader-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U amc_trader -d amc_trader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: amc-trader-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - amc-trader-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: amc-trader-backend
    environment:
      - DATABASE_URL=postgresql://amc_trader:amc_trader_password@postgres:5432/amc_trader
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=docker
      - DEBUG=true
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - amc-trader-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import time; time.sleep(5)' &&
        echo 'Running database migrations...' &&
        alembic upgrade head || true &&
        echo 'Starting FastAPI server...' &&
        uvicorn src.app:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: amc-trader-frontend
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - amc-trader-network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev

  # Discovery Job Service (optional - for automated discovery)
  discovery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: amc-trader-discovery
    environment:
      - DATABASE_URL=postgresql://amc_trader:amc_trader_password@postgres:5432/amc_trader
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=docker
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - discovery_logs:/app/logs
    networks:
      - amc-trader-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - discovery
    command: >
      sh -c "
        echo 'Starting discovery service...' &&
        python -c 'import time; time.sleep(10)' &&
        python src/jobs/discover.py
      "

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: amc-trader-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - frontend_build:/var/www/html
    networks:
      - amc-trader-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # Monitoring and Logging (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: amc-trader-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - amc-trader-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: amc-trader-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - amc-trader-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  discovery_logs:
    driver: local
  frontend_build:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  amc-trader-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16