services:
  # Backend API Service - Web Process Only
  - type: web
    name: amc-trader
    env: python
    plan: standard
    buildCommand: pip install -r requirements.txt
    startCommand: uvicorn backend.src.app:app --host 0.0.0.0 --port $PORT
    envVars:
      # Force BMS V1.1 in production (matches current codebase)
      - key: SCORING_STRATEGY
        value: bms_v1
      - key: FORCE_STRATEGY
        value: bms_v1
      - key: ALLOW_STRATEGY_OVERRIDE
        value: "false"
      
      # Redis connection (from managed service)
      - key: REDIS_URL
        fromService: 
          type: redis
          name: amc-redis
          property: connectionString
          
      # Existing required environment variables (values from Render dashboard)
      - key: POLYGON_API_KEY
        sync: false
      - key: DATABASE_URL
        sync: false
      - key: ALPACA_API_KEY
        sync: false
      - key: ALPACA_SECRET_KEY
        sync: false
      - key: ALPACA_BASE_URL
        sync: false
        
      # Additional configuration
      - key: ENVIRONMENT
        value: production
      - key: ENV
        value: prod
      - key: LOG_LEVEL
        value: INFO
      - key: DISCOVERY_CACHE_TTL
        value: "60"
      - key: ADMIN_TOKEN
        sync: false

      # Polygon MCP HTTP service configuration
      - key: POLYGON_MCP_URL
        value: https://amc-polygon-mcp.onrender.com/mcp
      - key: POLYGON_MCP_BASE_URL
        value: https://amc-polygon-mcp.onrender.com
    
    healthCheckPath: /health
    autoDeploy: true

  # Dedicated Discovery Worker Service
  - type: worker
    name: amc-discovery-worker
    env: python
    plan: standard  # Upgraded from starter for better reliability
    buildCommand: pip install -r requirements.txt
    startCommand: python -m backend.src.services.rq_worker_main
    
    # Health monitoring
    healthCheckPath: /health  # Worker doesn't have HTTP but Render will check process
    
    # Auto-restart configuration
    numInstances: 1
    maxSurge: 0
    maxUnavailable: 0
    envVars:
      # Redis connection (from managed service)
      - key: REDIS_URL
        fromService: 
          type: redis
          name: amc-redis
          property: connectionString
          
      # API keys needed by worker
      - key: POLYGON_API_KEY
        sync: false
      - key: DATABASE_URL
        sync: false
      - key: ALPACA_API_KEY
        sync: false
      - key: ALPACA_SECRET_KEY
        sync: false
      - key: ALPACA_BASE_URL
        sync: false
      
      # Worker configuration
      - key: SCORING_STRATEGY
        value: bms_v1
      - key: AMC_ENV
        value: production
      - key: ENV
        value: prod
      - key: LOG_LEVEL
        value: INFO
      - key: DISCOVERY_CACHE_TTL
        value: "600"
      - key: BMS_UNIVERSE_MIN_EXPECTED
        value: "4500"

      # Polygon MCP HTTP service configuration
      - key: POLYGON_MCP_URL
        value: https://amc-polygon-mcp.onrender.com/mcp
      - key: POLYGON_MCP_BASE_URL
        value: https://amc-polygon-mcp.onrender.com

  # Frontend Static Site
  - type: web
    name: amc-frontend
    env: static
    buildCommand: cd frontend && npm install && npm run build
    staticPublishPath: frontend/dist
    headers:
      - path: /*
        name: Cache-Control
        value: no-cache, no-store, must-revalidate
    routes:
      - type: rewrite
        source: /*
        destination: /index.html

  # Discovery Cron Job
  - type: cron
    name: amc-discovery
    env: docker
    dockerfilePath: ./Dockerfile
    schedule: "*/5 * * * 1-5"
    dockerCommand: sh ./backend/run_discovery.sh
    envVars:
      - key: REDIS_URL
        fromService:
          type: redis
          name: amc-redis
          property: connectionString
      - key: POLYGON_API_KEY
        sync: false
      - key: DATABASE_URL
        sync: false
      - key: ADMIN_TOKEN
        sync: false

  # Polygon MCP Server - HTTP Transport
  - type: web
    name: amc-polygon-mcp
    env: python
    plan: starter
    repo: https://github.com/polygon-io/mcp_polygon
    buildCommand: pip install uv && uv pip install --system -e .
    startCommand: uv run entrypoint.py
    envVars:
      - key: POLYGON_API_KEY
        sync: false
      - key: MCP_TRANSPORT
        value: streamable-http
      - key: FASTMCP_HOST
        value: 0.0.0.0
      - key: FASTMCP_PORT
        value: ${PORT}
    healthCheckPath: /
    autoDeploy: true

  # Redis service (moved from databases section)
  - type: redis
    name: amc-redis
    plan: starter
    ipAllowList: []